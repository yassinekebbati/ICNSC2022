 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Yassine Kebbati
% Date: 10/07/2021
% Control NNMPC-Autonomous_Driving
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Sep-2021 17:30:10.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-14;3;0.5;-30];
x1_step1.gain = [0.0714285714285714;0.0833333333333333;5;0.0333333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.4309344207046286179;1.7507949599543044528;1.0806285148843233213;-0.35269188053588512721;0.29844125813285882209;0.99233532767693155563;1.6668136232843235867;2.3857516234194471316];
IW1_1 = [1.2463366796262433933 -1.7306932512852097883 0.42222513782231768653 0.68385954991323716357;-0.13094954240642978083 -0.96093502903445093821 -0.83652264875537984956 1.9134302831909177911;-1.4403402972505818802 -1.0463838988198135294 -1.2138528651216597964 0.7387179956268311587;1.1339089950351215474 1.7017873237903813344 -1.1630214569155230553 0.018223103534345391763;0.46715523890510840532 0.13480607104177785849 -0.26393436307088957715 2.2932252233009515763;1.6758925575620404747 1.3957503460083839908 0.37187223986121792363 0.75500367963654368975;0.85690059118318706588 0.78576121723149061626 0.8718690145658548607 1.8572610013807879792;0.6208449650507381623 1.8615961143266612776 1.2435950963591915208 -0.14239378097074903429];

% Layer 2
b2 = [-1.8369972860000984838;0.61167159382827340774;-0.56314397055328968555;1.495643108951311584];
LW2_1 = [0.57939041589628170748 -0.32268466160966358114 -0.56060912535641682641 -0.036518830153454306942 0.22806781944278456398 0.64284132509740754546 0.75353645701138860513 -0.74861815762664873919;-0.64377176794680679439 -0.33880546975360825712 -0.48106345302063890923 -0.061325095801861760625 -0.03619561722485611921 -0.88421613076541039078 -0.1651287673068229378 1.0561313760126151973;-0.35750632304256585448 -1.0088130679606293061 -0.087752474889011528036 0.51717771799197920224 -0.6630921446182893586 0.5989639638977828362 0.35170009964589088458 -0.65848375964773175895;0.86672842924693227484 -0.60497373825041500517 -0.58876321354783589523 0.2997728136503549079 0.35747644728701838401 -0.72256080813890966041 -0.034127560170444479204 -0.96288905518995815402];

% Layer 3
b3 = 0.60943674196161512491;
LW3_2 = [0.66771508466120121916 0.1008033357718664258 -0.088760867625995873431 0.12097531948307402305];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.202020202020202;
y1_step1.xoffset = 0.1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
