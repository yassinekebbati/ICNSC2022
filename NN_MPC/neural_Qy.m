 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Yassine Kebbati
% Date: 10/07/2021
% Control NNMPC-Autonomous_Driving
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Sep-2021 17:18:58.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-14;3;0.5;-30];
x1_step1.gain = [0.0714285714285714;0.0833333333333333;5;0.0333333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.3414855167977020045;-1.6597253712730477559;1.0427027170136324852;0.33552122786317872816;0.3468585242508722688;1.0104240818704632865;-1.9810149851566478674;2.4522968950410937161];
IW1_1 = [0.65940541182123435515 1.6934739929433388905 1.5142938519066455605 0.14362012235841431496;0.99062957738088885939 1.2023926637866699796 -1.3368090480819125876 -1.174215109387352074;-1.8838581340234572536 -1.2044395900592592685 -0.1889866567932149688 0.64621451302681576223;-0.81479631806671726224 2.0548249133576703684 -0.68508321562073315469 -0.4467800507869086335;0.77815416211151944292 0.81238986216014930086 -0.64085126127394598239 -1.9680523109846734808;1.6310877073082648003 1.15948099435120211 -0.31059981802613040314 -1.2202494781476962427;-0.52420533987290129918 0.55083863152436507438 1.3786563106164579917 -1.4069541925260364845;0.76956925108709139938 0.91691147395686378729 -1.0590272977038230895 1.6009317249417309714];

% Layer 2
b2 = [-1.6144258786899972069;-0.43459406469452960264;0.66227977739047727557;1.5160291928301106168];
LW2_1 = [0.85492166525792001597 -0.058325325695272371707 0.25994414924979980519 -0.89041015447015237072 -0.056448560943115191901 0.97806805614989567044 -0.38161237019678256877 -0.32547116787891711143;0.19522215599549561094 0.38289581986330267771 0.11480721537446726688 0.5965041200361198559 -1.0971723381649451934 0.6646526747527836676 -0.58362235708040788307 0.45858256109986200721;0.081580264011491376852 0.52827748324931289581 -0.19616743992799498542 -0.5907221759032553754 0.62286443504181332464 0.57584592415317736869 -0.81631423745931541713 0.74626912025033931286;0.53805667770048792864 0.15147755412837710098 -0.33048869698799127059 -0.22248033325325750065 -0.80874038191950736731 0.89820486962940793152 0.94914241715416491907 -0.22804636882168127787];

% Layer 3
b3 = 0.15551201637623104923;
LW3_2 = [0.2216056107022987276 0.025851874871090446684 0.064480225966874346599 -0.057845246098857917849];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.202020202020202;
y1_step1.xoffset = 0.1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
