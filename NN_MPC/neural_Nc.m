 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Yassine Kebbati
% Date: 10/07/2021
% Control NNMPC-Autonomous_Driving
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Sep-2021 17:11:16.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-14;3;0.5;-30];
x1_step1.gain = [0.0714285714285714;0.0833333333333333;5;0.0333333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.6126375546511466652;-2.1497038685256284474;1.6685772752370153782;-1.2097697074620028523;-0.66868143768765109236;0.18318226275013058113;0.22765145825157234727;-0.7461171886335246084;1.1920646751489230031;-1.6036659683888547789;-2.1061915383310916283;-2.6479926096978094741];
IW1_1 = [0.97468140163351946192 -1.7648763529179718468 0.28688871279415084636 1.6124079050015538428;2.058819925984140653 -0.9330832637833277321 1.0556898380297405904 -0.64979732599397777015;-1.5712644906714450244 1.5037350169516772169 1.1915272135800432096 0.75200242745558076862;0.30081725327721070551 2.0082093155252835892 -1.2309279843814173727 1.0274477994751873844;0.37070436423007707694 1.9538031082628533053 -1.516008674592739025 0.75973472401890063121;-1.0155595403345785144 1.1471807589025282414 -0.34073733060248756477 -2.0670968296666649699;1.8312899337275119205 0.28419504891055291651 1.4699297999738218934 -1.0249907021789372852;-1.3518362797950800314 -0.71964228972293176056 1.4155188050611242634 -1.5478249200192135682;0.47273449492296798491 -1.4639837587075981151 -0.63084461118760482012 1.9827671727393358925;-2.1773211333419926206 -0.12450572081141546288 -0.1262721390582476344 -1.4751505916332396939;-1.4834497451262127488 -1.5220650314937562708 -1.275472928774338488 0.8656569912708277359;-1.0488671416427521876 1.0291287768227215249 -1.9982592479690428622 -0.64626861816466840693];

% Layer 2
b2 = [-1.6402139265598922879;1.2669745619878434173;0.7998288218941310701;-0.32479480139800542826;0.22993805828480992637;-0.70846123778323721876;1.2018958696833839106;1.7251729883404982591];
LW2_1 = [0.47363323421889746978 -0.44676216242648003618 0.69053442688673249972 -0.24038245395055929388 0.74469376723716174116 -0.45855812842608656421 0.58912274555445365287 -0.50384989346712916181 -0.47642044677076061943 0.17671580316307222702 -0.36672892679031021679 0.30608696561328563313;-0.19764092578429642844 -0.64778992349509845194 0.33604059283746351428 0.63186202429503557365 0.26160482851310712382 0.48912170329908771782 -0.33310267371181551121 -0.53145205983708831976 0.44870977214325352689 0.22652082939358308966 0.76521676354608547665 0.11162337133493710484;-0.39660275979374465249 -0.62988717606970867635 0.59880838497750976668 -0.021280410342422576009 -0.04978281006966649852 -0.56672307004836686151 -0.54713342608240866927 -0.20327376750652872972 -0.0090745324585287476943 0.54088228265681381757 -0.67552180373371506494 -0.54849557140778437692;0.73444529815648551541 0.55371452875206783606 0.35268656737975095927 -0.22139598508886598749 -0.48634200538137367653 0.20709422485141873449 -0.59049982535240674864 -0.092445295837152260954 0.13576786208747318452 -0.70324609287036332628 -0.44198637128910689409 0.37939461807639435209;0.37415195563947245549 0.44642898976912087639 0.043114940514368933766 0.71118612147754178832 -0.68835771627095521108 -0.0088873896757472037322 -0.46036006958673514333 0.40273458100844045093 0.21805712370582980286 -0.66854926651016843842 0.46766001368531534554 -0.60777642610286519709;-0.11901007894333023862 -0.11397641944591412055 -0.065479377224395493573 -0.23015370716185368227 0.73593067188856398086 0.18664137312110554157 -0.32311560952729651008 0.7148054038227728002 0.1776362548591451096 0.63615519566651346217 -0.38080044115731337406 -0.95424931992477468601;-0.024080003066615528196 0.60793302279729011239 -0.065301568952668156975 -0.5933055844521206712 0.72888260449115427342 0.2883686923044321837 0.27354363799445324812 0.2973717116241660352 0.54595835336040487995 0.57552606714299847646 0.48494541463903062528 0.35286091482376830131;0.089146377806104695751 -0.53880084967242936056 -0.65740864983545732603 -0.9413136639963536334 0.070236121658565561776 -0.3186469785803279775 -0.62258397691700262389 -0.014426661521692260917 0.12196049770544101221 0.072558250441344548931 -0.5619707446689319319 0.43707393373656983071];

% Layer 3
b3 = 0.58318295132877562281;
LW3_2 = [0.23630780170243184668 0.13857877996534959109 -0.53304660889042487781 0.29589131268612395287 -0.047198779472486421249 0.13872676636309227982 0.030518212595772267748 0.18552629942231257942];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.117647058823529;
y1_step1.xoffset = 1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
