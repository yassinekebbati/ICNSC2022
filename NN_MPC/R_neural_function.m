 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Yassine Kebbati
% Date: 10/07/2021
% Control NNMPC-Autonomous_Driving
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Jul-2021 18:20:28.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-15;3];
x1_step1.gain = [0.0666666666666667;0.0833333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.4371119383393775593;-4.6506231071508015162;3.8740925065788274217;3.095684904092399492;2.3281983007212163628;1.5387044577201911544;-0.77243266171290236866;-0.024344198848172592109;0.80827861316201765618;1.5655747302851150682;2.2943717375606431652;-3.0990556118342458269;-3.8442251758633285696;4.6507688594663241233;5.4204801881541531117];
IW1_1 = [-2.3435574598012984815 -4.8735966758059925397;1.9085583459681303431 -5.0727512205508791254;-4.9827610933111721181 2.1365132089992213693;-1.5082036361378095002 5.20818520506395366;-5.4196742161492563739 0.014735223087992032481;-3.4115957727613430706 4.2185539094645321256;2.9162181057531775252 -4.5692200437075713992;-3.8196140089002610374 -3.8467483387664014316;3.6261813771634239245 -4.0200426959012478534;4.8443657493610796649 -2.4296951543465894474;1.7028620922925201686 5.1604353091722590108;-0.41013792335118148813 -5.4092468023109248065;-0.40338521341179250923 -5.4306193599228755886;3.1858535177872475685 4.3775791991064867403;5.1472375139485180284 -1.6996665870992986314];

% Layer 2
b2 = [1.64254320478110305;0.78295524110434666643;-0.035204797435553152052;-0.78312140264667795542;1.5444683490568116291];
LW2_1 = [-0.48640432835624286545 -0.46655113447501250779 0.40718287232656436014 -0.31072494413504608834 0.17860682547056772052 0.33177731181812852856 0.2652721724972723627 -0.070815983143043520487 0.33718262630391404588 0.47625986091789279664 -0.36335412179987569559 -0.22846400362188287736 0.51733337219725905598 -0.56538756860927363856 0.37439106862815213494;-0.29444572454485257174 0.45887147999812588628 -0.46599440447839723944 0.13350850806088201961 -0.53697654081729417896 0.28807752214048981676 0.30909359056645391295 0.22505173766478975272 0.42540026217874138403 0.55896346504236571473 -0.34942461868379320888 0.17019333139050588088 0.58066370871824624089 0.47985971694308426905 -0.042139637366712237587;-0.68434237104123085693 0.045414164557801964262 -0.041632472640666225161 0.62765032285973831883 -0.26964955230886888948 -0.083721362341809088536 0.36845918927612247851 0.50515325901255525576 0.34705203747901697264 -0.16125325559238026796 -0.54021944653418940696 -0.56696626252673976154 -0.040729855181511669115 -0.49357723318635360332 0.2936601856481388384;-0.4902419532744134445 -0.2621337258050333574 -0.33473642778192619351 0.15465488525570589284 -0.42779977843037014784 0.41506879098927573768 0.036231118896968880772 0.41856338545723165145 -0.37539070003919228213 0.61097748661892969935 -0.012914234235762685546 -0.19565917691570880454 -0.2601264127330986109 0.63298763871046592744 0.64990426300059067621;-0.0020337927600073751541 0.17196138875135477675 0.51689591658865130519 -0.52173615994455313505 0.51556442463715912439 -0.1439706393027886111 0.3505258515202950842 -0.34064147013764262129 0.053884266108742258361 0.63005301709315697511 -0.41304027345962018858 0.56879288735194866167 -0.51516021893630370432 0.33680210451530379068 0.076898967695596412431];

% Layer 3
b3 = -0.12166452185209190862;
LW3_2 = [-0.40086866535724285932 -0.56801965052669567413 0.46913700588577411654 -0.018212107772163466796 0.022151219222806189935];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 20.2020202020202;
y1_step1.xoffset = 0.001;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = poslin_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
